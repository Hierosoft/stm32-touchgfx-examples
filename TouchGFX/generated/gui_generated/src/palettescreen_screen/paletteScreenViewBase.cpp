/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/palettescreen_screen/paletteScreenViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

paletteScreenViewBase::paletteScreenViewBase() :
    buttonCallback(this, &paletteScreenViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &paletteScreenViewBase::sliderValueChangedCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    settingsButton.setXY(740, 0);
    settingsButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_SETTINGS_60_60_000000_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_SETTINGS_60_60_FFFFFF_SVG_ID));
    settingsButton.setIconXY(1, 1);
    settingsButton.setAction(buttonCallback);
    add(settingsButton);

    filesButton.setXY(670, 0);
    filesButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_ALL_INBOX_60_60_000000_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_ALL_INBOX_60_60_FFFFFF_SVG_ID));
    filesButton.setIconXY(1, 1);
    filesButton.setAction(buttonCallback);
    add(filesButton);

    backButton.setXY(0, 0);
    backButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_BACK_70_70_000000_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_BACK_70_70_FFFFFF_SVG_ID));
    backButton.setIconXY(-5, -4);
    backButton.setAction(buttonCallback);
    add(backButton);

    brushButton.setXY(67, 0);
    brushButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_IMAGE_BRUSH_60_60_000000_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_CONTENT_INBOX_60_60_FFFFFF_SVG_ID));
    brushButton.setIconXY(0, 0);
    brushButton.setAction(buttonCallback);
    add(brushButton);

    previousPaletteButton.setXY(467, 239);
    previousPaletteButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_LEFT_60_60_000000_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_LEFT_60_60_FFFFFF_SVG_ID));
    previousPaletteButton.setIconXY(0, 0);
    previousPaletteButton.setAction(buttonCallback);
    add(previousPaletteButton);

    nextPaletteButton.setXY(674, 240);
    nextPaletteButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_RIGHT_60_60_000000_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_RIGHT_60_60_FFFFFF_SVG_ID));
    nextPaletteButton.setIconXY(0, 0);
    nextPaletteButton.setAction(buttonCallback);
    add(nextPaletteButton);

    editPaletteCaptionTA.setXY(543, 34);
    editPaletteCaptionTA.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    editPaletteCaptionTA.setLinespacing(0);
    editPaletteCaptionTA.setTypedText(touchgfx::TypedText(T___SINGLEUSE_I92I));
    add(editPaletteCaptionTA);

    fullPaletteHueCaptionTA.setPosition(160, 450, 255, 30);
    fullPaletteHueCaptionTA.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    fullPaletteHueCaptionTA.setLinespacing(0);
    fullPaletteHueCaptionTA.setTypedText(touchgfx::TypedText(T___SINGLEUSE_I4DW));
    add(fullPaletteHueCaptionTA);

    paletteNameCaptionTA.setPosition(478, 441, 255, 30);
    paletteNameCaptionTA.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    paletteNameCaptionTA.setLinespacing(0);
    paletteNameCaptionTA.setTypedText(touchgfx::TypedText(T___SINGLEUSE_7U59));
    add(paletteNameCaptionTA);

    newPaletteButton.setXY(497, 83);
    newPaletteButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_TINY_ROUNDED_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_TINY_ROUNDED_ACTION_ID));
    newPaletteButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_UHB2));
    newPaletteButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    newPaletteButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    newPaletteButton.setAction(buttonCallback);
    add(newPaletteButton);

    deletePaletteButton.setXY(604, 83);
    deletePaletteButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_TINY_ROUNDED_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_TINY_ROUNDED_ACTION_ID));
    deletePaletteButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_WQLR));
    deletePaletteButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    deletePaletteButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    deletePaletteButton.setAction(buttonCallback);
    add(deletePaletteButton);

    fullPaletteHSlider.setXY(121, 424);
    fullPaletteHSlider.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_TRACK_MEDIUM_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_FILLER_MEDIUM_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_ROUNDED_DARK_ID));
    fullPaletteHSlider.setupHorizontalSlider(16, 11, 0, 0, 300);
    fullPaletteHSlider.setValueRange(0, 255);
    fullPaletteHSlider.setValue(255);
    fullPaletteHSlider.setNewValueCallback(sliderValueChangedCallback);
    add(fullPaletteHSlider);

    fullPaletteOutline.setPosition(160, 129, 255, 255);
    fullPaletteOutline.setColor(touchgfx::Color::getColorFromRGB(32, 32, 32));
    add(fullPaletteOutline);

    fullPaletteImage.setXY(160, 129);
    add(fullPaletteImage);

    paletteBorder.setPosition(538, 129, 125, 280);
    paletteBorder.setColor(touchgfx::Color::getColorFromRGB(99, 89, 84));
    paletteBorder.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    paletteBorder.setBorderSize(0);
    paletteBorder.setAlpha(189);
    add(paletteBorder);

    fullPaletteSVCursor.setPosition(373, 342, 80, 80);
    fullPaletteSVCursor.setOrigin(0.0f, 0.0f);
    fullPaletteSVCursor.setScale(1.0f, 1.0f);
    fullPaletteSVCursor.setAngle(0.0f);
    fullPaletteSVCursorPainter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    fullPaletteSVCursor.setPainter(fullPaletteSVCursorPainter);
    const touchgfx::AbstractShape::ShapePoint<float> fullPaletteSVCursorPoints[10] = { { 70.0f, 40.0f }, { 80.0f, 40.0f }, { 40.0f, 80.0f }, { 0.0f, 40.0f }, { 40.0f, 0.0f }, { 80.0f, 40.0f }, { 70.0f, 40.0f }, { 40.0f, 10.0f }, { 10.0f, 40.0f }, { 40.0f, 70.0f } };
    fullPaletteSVCursor.setShape(fullPaletteSVCursorPoints);
    add(fullPaletteSVCursor);

    paletteImage.setXY(538, 129);
    add(paletteImage);

    scalableImage1.setPosition(263, 71, 48, 48);
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(scalableImage1);
}

paletteScreenViewBase::~paletteScreenViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void paletteScreenViewBase::setupScreen()
{

}

void paletteScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &backButton)
    {
        //navPaletteToDraw
        //When backButton clicked change screen to drawScreen
        //Go to drawScreen with no screen transition
        application().gotodrawScreenScreenNoTransition();
    }
    if (&src == &brushButton)
    {
        //navPaletteToBrush
        //When brushButton clicked change screen to brushScreen
        //Go to brushScreen with no screen transition
        application().gotobrushScreenScreenNoTransition();
    }
    if (&src == &filesButton)
    {
        //navPaletteToFiles
        //When filesButton clicked change screen to filesScreen
        //Go to filesScreen with no screen transition
        application().gotofilesScreenScreenNoTransition();
    }
    if (&src == &settingsButton)
    {
        //navPaletteToSettings
        //When settingsButton clicked change screen to settingsScreen
        //Go to settingsScreen with no screen transition
        application().gotosettingsScreenScreenNoTransition();
    }
    if (&src == &previousPaletteButton)
    {
        //goToPreviousPalette
        //When previousPaletteButton clicked execute C++ code
        //Execute C++ code
        // TODO: display previous palette
    }
    if (&src == &nextPaletteButton)
    {
        //goToNextPalette
        //When nextPaletteButton clicked execute C++ code
        //Execute C++ code
        // TODO: display next palette
    }
    if (&src == &newPaletteButton)
    {
        //newPaletteClicked
        //When newPaletteButton clicked execute C++ code
        //Execute C++ code
        // TODO: Create new palette
    }
    if (&src == &deletePaletteButton)
    {
        //deletePaletteClicked
        //When deletePaletteButton clicked execute C++ code
        //Execute C++ code
        // TODO: Delete currently selected palette
    }
}

void paletteScreenViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &fullPaletteHSlider)
    {
        //hueSliderValueChanged
        //When fullPaletteHSlider value changed execute C++ code
        //Execute C++ code
        // TODO: change color using new fullPaletteHSlider value
    }
}
