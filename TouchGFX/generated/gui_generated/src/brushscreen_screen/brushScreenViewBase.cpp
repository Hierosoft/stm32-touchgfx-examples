/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/brushscreen_screen/brushScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

brushScreenViewBase::brushScreenViewBase() :
    buttonCallback(this, &brushScreenViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &brushScreenViewBase::sliderValueChangedCallbackHandler)
{
    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    editBrushImage.setXY(359, 216);
    add(editBrushImage);

    statusTA.setPosition(0, 453, 800, 27);
    statusTA.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    statusTA.setLinespacing(0);
    statusTA.setTypedText(touchgfx::TypedText(T___SINGLEUSE_K9RC));
    add(statusTA);

    hardnessCaptionTA.setPosition(96, 336, 111, 32);
    hardnessCaptionTA.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    hardnessCaptionTA.setLinespacing(0);
    hardnessCaptionTA.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UHO4));
    add(hardnessCaptionTA);

    oversprayCaptionTA.setPosition(93, 410, 114, 32);
    oversprayCaptionTA.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    oversprayCaptionTA.setLinespacing(0);
    oversprayCaptionTA.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EJUQ));
    add(oversprayCaptionTA);

    brushCaptionTA.setXY(352, 0);
    brushCaptionTA.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    brushCaptionTA.setLinespacing(0);
    brushCaptionTA.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CIL7));
    add(brushCaptionTA);

    brushNameTA.setPosition(361, 181, 77, 29);
    brushNameTA.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    brushNameTA.setLinespacing(0);
    brushNameTA.setTypedText(touchgfx::TypedText(T___SINGLEUSE_YMEI));
    add(brushNameTA);

    brushmakerNameTA.setPosition(650, 182, 77, 29);
    brushmakerNameTA.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    brushmakerNameTA.setLinespacing(0);
    brushmakerNameTA.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LWDN));
    add(brushmakerNameTA);

    sizeValueTA.setPosition(202, 262, 77, 29);
    sizeValueTA.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    sizeValueTA.setLinespacing(0);
    sizeValueTA.setTypedText(touchgfx::TypedText(T___SINGLEUSE_OD9X));
    add(sizeValueTA);

    hardnessValueTA.setPosition(202, 338, 77, 29);
    hardnessValueTA.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    hardnessValueTA.setLinespacing(0);
    hardnessValueTA.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9YM9));
    add(hardnessValueTA);

    oversprayValueTA.setPosition(202, 412, 77, 29);
    oversprayValueTA.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    oversprayValueTA.setLinespacing(0);
    oversprayValueTA.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NOJS));
    add(oversprayValueTA);

    backButton.setXY(0, 0);
    backButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_BACK_70_70_000000_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_BACK_70_70_FFFFFF_SVG_ID));
    backButton.setIconXY(-5, -4);
    backButton.setAction(buttonCallback);
    add(backButton);

    settingsButton.setXY(740, 0);
    settingsButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_SETTINGS_60_60_000000_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_SETTINGS_60_60_FFFFFF_SVG_ID));
    settingsButton.setIconXY(1, 1);
    settingsButton.setAction(buttonCallback);
    add(settingsButton);

    paletteButton.setXY(600, 0);
    paletteButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_IMAGE_PALETTE_60_60_000000_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_IMAGE_PALETTE_60_60_FFFFFF_SVG_ID));
    paletteButton.setIconXY(1, 1);
    paletteButton.setAction(buttonCallback);
    add(paletteButton);

    filesButton.setXY(670, 0);
    filesButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_ALL_INBOX_60_60_000000_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_ALL_INBOX_60_60_FFFFFF_SVG_ID));
    filesButton.setIconXY(1, 1);
    filesButton.setAction(buttonCallback);
    add(filesButton);

    deleteBrushButton.setXY(349, 99);
    deleteBrushButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_TINY_ROUNDED_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_TINY_ROUNDED_ACTION_ID));
    deleteBrushButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_7275));
    deleteBrushButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    deleteBrushButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    deleteBrushButton.setAction(buttonCallback);
    add(deleteBrushButton);

    newBrushButton.setXY(349, 60);
    newBrushButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_TINY_ROUNDED_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_TINY_ROUNDED_ACTION_ID));
    newBrushButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_QK1K));
    newBrushButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    newBrushButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    newBrushButton.setAction(buttonCallback);
    add(newBrushButton);

    setBrushmakerButton.setXY(601, 132);
    setBrushmakerButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUNDED_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUNDED_ACTION_ID));
    setBrushmakerButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_GE5Z));
    setBrushmakerButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    setBrushmakerButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    setBrushmakerButton.setAction(buttonCallback);
    add(setBrushmakerButton);

    hardnessSlider.setXY(3, 304);
    hardnessSlider.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_TRACK_MEDIUM_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_FILLER_MEDIUM_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_ROUNDED_DARK_ID));
    hardnessSlider.setupHorizontalSlider(16, 11, 0, 0, 255);
    hardnessSlider.setValueRange(0, 100);
    hardnessSlider.setValue(50);
    hardnessSlider.setNewValueCallback(sliderValueChangedCallback);
    add(hardnessSlider);

    sizeCaptionTA.setPosition(96, 260, 111, 32);
    sizeCaptionTA.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    sizeCaptionTA.setLinespacing(0);
    sizeCaptionTA.setTypedText(touchgfx::TypedText(T___SINGLEUSE_OL05));
    add(sizeCaptionTA);

    sizeSlider.setXY(3, 228);
    sizeSlider.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_TRACK_MEDIUM_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_FILLER_MEDIUM_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_ROUNDED_DARK_ID));
    sizeSlider.setupHorizontalSlider(16, 11, 0, 0, 255);
    sizeSlider.setValueRange(0, 100);
    sizeSlider.setValue(50);
    sizeSlider.setNewValueCallback(sliderValueChangedCallback);
    add(sizeSlider);

    brushScrollSlider.setXY(241, 141);
    brushScrollSlider.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_TRACK_MEDIUM_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_FILLER_MEDIUM_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_ROUNDED_DARK_ID));
    brushScrollSlider.setupHorizontalSlider(16, 11, 0, 0, 255);
    brushScrollSlider.setValueRange(0, 255);
    brushScrollSlider.setValue(32);
    brushScrollSlider.setNewValueCallback(sliderValueChangedCallback);
    add(brushScrollSlider);

    overspraySlider.setXY(3, 378);
    overspraySlider.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_TRACK_MEDIUM_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_FILLER_MEDIUM_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_ROUNDED_DARK_ID));
    overspraySlider.setupHorizontalSlider(16, 11, 0, 0, 255);
    overspraySlider.setValueRange(0, 100);
    overspraySlider.setValue(50);
    overspraySlider.setNewValueCallback(sliderValueChangedCallback);
    add(overspraySlider);

    brushBack1Image.setPosition(319, 176, 40, 40);
    brushBack1Image.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(brushBack1Image);

    brushBack2Image.setPosition(279, 176, 40, 40);
    brushBack2Image.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(brushBack2Image);

    brushBack3Image.setPosition(241, 176, 40, 40);
    brushBack3Image.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(brushBack3Image);

    brushForward1Image.setPosition(439, 176, 40, 40);
    brushForward1Image.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(brushForward1Image);

    brushForward2Image.setPosition(479, 176, 40, 40);
    brushForward2Image.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(brushForward2Image);

    brushForward3Image.setPosition(519, 176, 40, 40);
    brushForward3Image.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(brushForward3Image);
}

brushScreenViewBase::~brushScreenViewBase()
{

}

void brushScreenViewBase::setupScreen()
{

}

void brushScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &backButton)
    {
        //navBrushToDraw
        //When backButton clicked change screen to drawScreen
        //Go to drawScreen with no screen transition
        application().gotodrawScreenScreenNoTransition();
    }
    if (&src == &paletteButton)
    {
        //navBrushToPalette
        //When paletteButton clicked change screen to paletteScreen
        //Go to paletteScreen with no screen transition
        application().gotopaletteScreenScreenNoTransition();
    }
    if (&src == &settingsButton)
    {
        //navBrushToSettings
        //When settingsButton clicked change screen to settingsScreen
        //Go to settingsScreen with no screen transition
        application().gotosettingsScreenScreenNoTransition();
    }
    if (&src == &filesButton)
    {
        //navBrushToFiles
        //When filesButton clicked change screen to filesScreen
        //Go to filesScreen with no screen transition
        application().gotofilesScreenScreenNoTransition();
    }
    if (&src == &newBrushButton)
    {
        //newBrushClicked
        //When newBrushButton clicked execute C++ code
        //Execute C++ code
        // TODO: create new brush
    }
    if (&src == &deleteBrushButton)
    {
        //deleteBrushClicked
        //When deleteBrushButton clicked execute C++ code
        //Execute C++ code
        // TODO: delete brush
    }
    if (&src == &setBrushmakerButton)
    {
        //setBrushmakerButtonClicked
        //When setBrushmakerButton clicked execute C++ code
        //Execute C++ code
        // TODO: Set the current brush as the brushmaker to edit the brushImage
    }
}

void brushScreenViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &hardnessSlider)
    {
        //hardnessSliderValueChanged
        //When hardnessSlider value changed execute C++ code
        //Execute C++ code
        // TODO: change brush hardness and select generated brush
    }
    if (&src == &sizeSlider)
    {
        //sizeSliderValueChanged
        //When sizeSlider value changed execute C++ code
        //Execute C++ code
        // TODO: change brush size and select generated brush
    }
    if (&src == &brushScrollSlider)
    {
        //brushScrollSliderValueChanged
        //When brushScrollSlider value changed execute C++ code
        //Execute C++ code
        // Select a brush from the list using the value of brushScrollSlider as the index
    }
    if (&src == &overspraySlider)
    {
        //overspraySliderValueChanged
        //When overspraySlider value changed execute C++ code
        //Execute C++ code
        // TODO: change brush overspray amount and select generated brush
    }
}
